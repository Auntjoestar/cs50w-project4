# Generated by Django 5.0.6 on 2024-06-30 17:07

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=280, verbose_name='Content')),
                ('postTime', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 553151, tzinfo=datetime.timezone.utc), verbose_name='Posted at')),
                ('updateTime', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 553177, tzinfo=datetime.timezone.utc), verbose_name='Updated at')),
                ('likes', models.ManyToManyField(related_name='liker', to=settings.AUTH_USER_MODEL, verbose_name='Liked By')),
                ('poster', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='poster', to=settings.AUTH_USER_MODEL, verbose_name='Posted By')),
                ('views', models.ManyToManyField(related_name='viewer', to=settings.AUTH_USER_MODEL, verbose_name='View By')),
            ],
            options={
                'ordering': ['-postTime'],
            },
        ),
        migrations.CreateModel(
            name='Pictures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(upload_to='static/network/pictures', verbose_name='File')),
                ('timestamp', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 557564, tzinfo=datetime.timezone.utc), verbose_name='Uploaded at')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded', to='network.post', verbose_name='Uploaded on')),
            ],
        ),
        migrations.CreateModel(
            name='Hashtags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashtag', models.CharField(blank=True, max_length=140, verbose_name='Hashtag')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Uploaded at')),
                ('post', models.ManyToManyField(related_name='post', to='network.post', verbose_name='Post')),
            ],
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=280, verbose_name='Comment')),
                ('commentedAt', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 555446, tzinfo=datetime.timezone.utc), verbose_name='Posted at')),
                ('updatedAt', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 555472, tzinfo=datetime.timezone.utc), verbose_name='Updated at')),
                ('commenter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Commenter', to=settings.AUTH_USER_MODEL, verbose_name='Commented By')),
                ('likes', models.ManyToManyField(related_name='commentliker', to=settings.AUTH_USER_MODEL, verbose_name='Comment Liked by')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commented_post', to='network.post', verbose_name='Commented On')),
            ],
            options={
                'ordering': ['-commentedAt'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('pronouns', models.CharField(choices=[('HH', 'He/Him'), ('SS', 'She/Her'), ('TT', 'They/Them'), ('HT', 'He/They'), ('ST', 'She/They'), ('IR', 'I rather not to say'), ('OT', 'Other')], default='IR', max_length=2, verbose_name='Pronouns')),
                ('bio', models.CharField(max_length=160, verbose_name='Bio')),
                ('joined', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 550996, tzinfo=datetime.timezone.utc), verbose_name='Joined at')),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 551078, tzinfo=datetime.timezone.utc), verbose_name='Updated at')),
                ('followers', models.ManyToManyField(related_name='follower', to=settings.AUTH_USER_MODEL, verbose_name='Followed by')),
                ('username', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Username')),
            ],
        ),
        migrations.CreateModel(
            name='ProfilePictures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(upload_to='static/network/profilePictures', verbose_name='File')),
                ('timestamp', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 552499, tzinfo=datetime.timezone.utc), verbose_name='Uploaded AT')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='uploader', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply', models.CharField(max_length=280, verbose_name='Reply')),
                ('repliedAt', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 556856, tzinfo=datetime.timezone.utc), verbose_name='Replied at')),
                ('UpdatedAt', models.DateTimeField(default=datetime.datetime(2024, 6, 30, 17, 7, 38, 556883, tzinfo=datetime.timezone.utc), verbose_name='Updated at')),
                ('repliedOn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.comments', verbose_name='Replied to')),
                ('replier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replier', to=settings.AUTH_USER_MODEL, verbose_name='Replied by')),
            ],
            options={
                'ordering': ['-repliedAt'],
            },
        ),
    ]
